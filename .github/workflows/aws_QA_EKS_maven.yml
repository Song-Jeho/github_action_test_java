name: QA - Deploy to Amazon EKS - Java Maven

# "QA"가 앞에 달린 tag가 Push(Release)되면 workflow 동작
on:
  push:
    tags:
      - QA*
    
env:
  # Organization Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER: ${{ secrets.QA_EKS_CLUSTER_NAME }}
  ECR_REPOSITORY: ${{ secrets.QA_ECR_REPOSITORY }}
  # Workflow 변수
  # - 해상 서비스 및 애플리케이션에 맞게 수정 필요
  APP_NAME: <INPUT_APP_NAME>       # Application 이름. Image TAG Prefix로 사용 됨
  AWS_REGION: ap-northeast-2       # AWS EKS & ECR이 위치한 AWS Region
  DEPLOYMENT_NAME: <INPUT_APP_NAME>-deployment       # Kubernetes Deployment 명
  JAVA_VERSION : 8       # JAVA REF: https://github.com/marketplace/actions/setup-java-jdk
  JAVA_DISTRIBUTION : adopt       # JAVA REF 링크를 참고하여 필요 Java 버전 및 Distribution을 설정
  YAML_ENV : yaml/stg

# mains 브랜치에서의 Push일 경우에만 동작
jobs:
  branch-check:
    name: Check Triggered Branch
    if: github.event.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Branch Check if Main
      run: echo "main-branch"

  # QA_admin 승인을 받아야 Build / Deploy 단계 진행
  build:
    needs: branch-check
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: QA_Admin

    steps:
    # 소스 가져오기
    - name: Checkout
      uses: actions/checkout@v2

    # AWS credentials 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # AWS ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  
    # sha 난수 생성
    - name: Short sha
      run: echo "short_sha=`echo ${{ github.sha }} | cut -c1-8`" >> $GITHUB_ENV
          
    # Image Tag에 참고하기 위한 Github Tag 값 확인
    - name: Get tag
      id: tag
      uses: ucmp-template-repos/PUBLIC-github-actions/action-get-tag@main
    - name: Use tag
      run: echo ${{steps.tag.outputs.tag}}

    # Java 환경 구성
    - name: Set up JDK
      uses: actions/setup-java@v2.2.0
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    # Mavenw 환경 구성
    - name: Grant execute permission for mvnw
      run: chmod +x mvnw

    # Mavenw 페키지 수행
    - name: Build with Maven
      run: ./mvnw clean package

    # Docker 빌드 및 ECR로 Push 진행
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{steps.tag.outputs.tag}}_${{ env.APP_NAME }}
      run: |
        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_${{ env.short_sha }} -f Dockerfile .
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_${{ env.short_sha }}
        docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_${{ env.short_sha }} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_latest
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_latest
        echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_${{ env.short_sha }}"
 
  deploy:
    needs: build
    name: Deploy to QA Environment
    runs-on: ubuntu-latest
    
    steps:    
    # 소스 가져오기
    - name: Checkout
      uses: actions/checkout@v2

    # AWS credentials 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # AWS ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # sha 난수 생성
    - name: Short sha
      run: echo "short_sha=`echo ${{ github.sha }} | cut -c1-8`" >> $GITHUB_ENV

    # Image Tag에 참고하기 위한 Github Tag 값 확인
    - name: Get tag
      id: tag
      uses: ucmp-template-repos/PUBLIC-github-actions/action-get-tag@main
    - name: Use tag
      run: echo ${{steps.tag.outputs.tag}}

    # EKS 배포를 위한 Kubeconfig 설정
    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER
    
    # EKS로 배포
    # - $YAML_ENV경로에 올라와있는 yaml 파일 기준으로, 현재 EKS에 업데이트할 부분이 있으면 신규배포되고 변경점이 없으면 배포하지 않음
    # - 일반적인 케이스에서는 윗 단계에서 빌드된 image만 변경 배포됨    
    # - 기존 yaml의 변경배포가 필요할 경우, $YAML_ENV 경로에 있는 yaml을 변경하고 workflow를 동작시키면 변경배포 됨
    # - 추가 yaml 배포가 필요할 경우, $YAML_ENV 경로에 파일 적재 후, 
    # - 동일 경로 kustomize.yml의 resources 목록에 추가 yaml을 등록하고 workflow를 동작시키면 추가 배포 됨
    - name: Deploy to EKS
      id: deploy-eks
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{steps.tag.outputs.tag}}_${{ env.APP_NAME }}
      run: |-
        cd $YAML_ENV
        kustomize edit set image kustomization-eks-repository=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}_${{ env.short_sha }}
        kustomize build . | kubectl apply -k ./

    - name: Verify Deployment
      run: |-
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get deployments
        kubectl get services -o wide
        kubectl get ingress
        kubectl get pods
